// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Config from "./Config.res.mjs";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Js_json from "rescript/lib/es6/js_json.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Core__Promise from "@rescript/core/src/Core__Promise.res.mjs";
import * as Webapi__Fetch from "rescript-webapi/src/Webapi/Webapi__Fetch.res.mjs";

function createClient(baseUrlOpt, timeoutOpt, retryAttemptsOpt, param) {
  var baseUrl = baseUrlOpt !== undefined ? baseUrlOpt : Config.baseUrl;
  var timeout = timeoutOpt !== undefined ? timeoutOpt : Config.defaultTimeout;
  var retryAttempts = retryAttemptsOpt !== undefined ? retryAttemptsOpt : Config.defaultRetryAttempts;
  return {
          baseUrl: baseUrl,
          timeout: timeout,
          retryAttempts: retryAttempts
        };
}

function createClientUrl(baseUrl) {
  return createClient(baseUrl, Config.defaultTimeout, Config.defaultRetryAttempts, undefined);
}

function getPrice(client, cryptoId, vsCurrency, onSuccess, onError) {
  var endpoint = client.baseUrl + "/simple/price?ids=" + cryptoId + "&vs_currencies=" + vsCurrency;
  Core__Promise.$$catch(fetch(endpoint).then(function (prim) {
              return prim.text();
            }).then(function (text) {
            var json = Js_json.decodeObject(JSON.parse(text));
            if (json === undefined) {
              return Promise.resolve(onError("Invalid JSON response"));
            }
            var dataJson = Js_dict.get(json, cryptoId);
            if (dataJson === undefined) {
              return Promise.resolve(onError("Crypto ID not found in response"));
            }
            var dataDict = Js_json.decodeObject(dataJson);
            if (dataDict === undefined) {
              return Promise.resolve(onError("Invalid crypto data format"));
            }
            var priceJson = Js_dict.get(dataDict, vsCurrency);
            if (priceJson === undefined) {
              return Promise.resolve(onError("Currency not found in response"));
            }
            var price = Js_json.decodeNumber(priceJson);
            if (price !== undefined) {
              return Promise.resolve(onSuccess({
                              price: price,
                              timestamp: Date.now(),
                              symbol: cryptoId + "/" + vsCurrency
                            }));
            } else {
              return Promise.resolve(onError("Invalid price format"));
            }
          }), (function (param) {
          onError("Failed to fetch data");
          return Promise.resolve();
        }));
}

function getCMCPrice(client, cryptoSymbol, currency) {
  var endpoint = client.baseUrl + "/v1/cryptocurrency/quotes/latest?convert=" + currency + "&symbol=" + cryptoSymbol;
  Core__Promise.$$catch(fetch(endpoint, Webapi__Fetch.RequestInit.make("Get", {
                    Accepts: "application/json",
                    "X-CMC_PRO_API_KEY": "8958b1e7-36e6-4335-9ff7-86f9da097128"
                  }, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined)).then(function (prim) {
              return prim.json();
            }).then(function (json) {
            Belt_Option.getWithDefault(Belt_Option.map(Belt_Option.flatMap(Belt_Option.flatMap(Belt_Option.flatMap(Belt_Option.flatMap(Belt_Option.flatMap(Belt_Option.flatMap(Belt_Option.flatMap(Belt_Option.flatMap(Belt_Option.flatMap(Js_json.decodeObject(json), (function (jsonObject) {
                                                            return Js_dict.get(jsonObject, "data");
                                                          })), Js_json.decodeObject), (function (dataObj) {
                                                    return Js_dict.get(dataObj, "BTC");
                                                  })), Js_json.decodeObject), (function (symbol) {
                                            return Js_dict.get(symbol, "quote");
                                          })), Js_json.decodeObject), (function (quoteObj) {
                                    return Js_dict.get(quoteObj, "USD");
                                  })), Js_json.decodeObject), (function (ccyObj) {
                            return Js_dict.get(ccyObj, "price");
                          })), (function (price) {
                        console.log(price);
                      })), undefined);
            return Promise.resolve();
          }), (function (_error) {
          console.log("Failed to fetch data");
          return Promise.resolve();
        }));
}

var PriceLib = {
  createClient: createClient,
  createClientUrl: createClientUrl,
  getPrice: getPrice,
  getCMCPrice: getCMCPrice
};

export {
  PriceLib ,
}
/* No side effect */
