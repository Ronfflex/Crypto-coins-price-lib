// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Config from "./Config.res.mjs";
import LruCache from "lru-cache";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Promise from "@rescript/core/src/Core__Promise.res.mjs";

function make(ttl, maxOpt, param) {
  var max = maxOpt !== undefined ? maxOpt : Config.maxCacheSize;
  var options_ttl = Math.imul(ttl, 1000);
  var options = {
    max: max,
    ttl: options_ttl
  };
  return {
          cache: LruCache(options)
        };
}

function set(cache, key, value) {
  cache.cache.set(key, value);
}

function get(cache, key) {
  return Caml_option.nullable_to_opt(cache.cache.get(key));
}

function clear(cache) {
  cache.cache.clear();
}

var Cache = {
  make: make,
  set: set,
  get: get,
  clear: clear
};

function isValidPrice(price) {
  if (price > 0.0 && !Number.isNaN(price)) {
    return Number.isFinite(price);
  } else {
    return false;
  }
}

function throttle(fn, timeWindow) {
  var lastCall = {
    contents: undefined
  };
  return function () {
    var now = Date.now();
    var last = lastCall.contents;
    if (last !== undefined && now - last <= timeWindow) {
      return ;
    } else {
      lastCall.contents = now;
      return fn();
    }
  };
}

function retry(operation, attempts, delay) {
  return Core__Promise.$$catch(operation(), (function (error) {
                if (attempts > 1) {
                  return new Promise((function (resolve, param) {
                                  setTimeout((function () {
                                          resolve(retry(operation, attempts - 1 | 0, (delay << 1)));
                                        }), delay);
                                })).then(function (x) {
                              return x;
                            });
                } else {
                  return Promise.reject(error);
                }
              }));
}

export {
  Cache ,
  isValidPrice ,
  throttle ,
  retry ,
}
/* lru-cache Not a pure module */
